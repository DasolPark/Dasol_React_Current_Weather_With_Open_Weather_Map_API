{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","spring","text","iconName","summer","autumn","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","main","name","temp","feels_like","temp_min","temp_max","humidity","className","style","textAlign","role","aria-label","Spinner","width","height","message","defaultPorps","dotenv","config","App","state","lon","errorNavMessage","errorOpenWeatherMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","fetch","process","then","res","json","result","weather","err","error","errorMessage","this","getContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.af6ccf86.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst seasonConfig = {\r\n  spring: {\r\n    text: `It's spring!`,\r\n    iconName: 'tree'\r\n  },\r\n  summer: {\r\n    text: `It's summer!`,\r\n    iconName: 'sun'\r\n  },\r\n  autumn: {\r\n    text: `It's autumn!`,\r\n    iconName: 'leaf'\r\n  },\r\n  winter: {\r\n    text: `It's winter!`,\r\n    iconName: 'snowflake'\r\n  }\r\n};\r\n\r\nfunction getSeason(lat, month) {\r\n  if (month >= 3 && month <= 5) {\r\n    return lat > 0 ? 'spring' : 'winter';\r\n  } else if (month >= 6 && month <= 8) {\r\n    return lat > 0 ? 'summer' : 'winter';\r\n  } else if (month >= 9 && month <= 10) {\r\n    return lat > 0 ? 'autumn' : 'summer';\r\n  } else {\r\n    return lat > 0 ? 'winter' : 'summer';\r\n  }\r\n}\r\n\r\nconst SeasonDisplay = props => {\r\n  const season = getSeason(props.lat, new Date().getMonth() + 1);\r\n  const { text, iconName } = seasonConfig[season];\r\n  const { main, name, temp, feels_like, temp_min, temp_max, humidity } = props;\r\n\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-left ${iconName} icon massive`}></i>\r\n      <div className=\"text__container\" style={{ textAlign: 'center' }}>\r\n        <h1>{text}</h1>\r\n        <h3>\r\n          현재 위치\r\n          <span role=\"img\" aria-label=\"location\">\r\n            📍\r\n          </span>{' '}\r\n          {name}\r\n        </h3>\r\n        <h3>\r\n          현재 날씨\r\n          <span role=\"img\" aria-label=\"temp\">\r\n            ⛅\r\n          </span>{' '}\r\n          {main}\r\n        </h3>\r\n        <h3>\r\n          현재 기온\r\n          <span role=\"img\" aria-label=\"temp\">\r\n            ⛅\r\n          </span>{' '}\r\n          {temp}°C\r\n        </h3>\r\n        <h3>\r\n          체감 온도\r\n          <span role=\"img\" aria-label=\"feels_like\">\r\n            ⛅\r\n          </span>{' '}\r\n          {feels_like}°C\r\n        </h3>\r\n        <h3>\r\n          최저 기온\r\n          <span role=\"img\" aria-label=\"temp_min\">\r\n            ⛅\r\n          </span>{' '}\r\n          {temp_min}°C\r\n        </h3>\r\n        <h3>\r\n          최고 기온\r\n          <span role=\"img\" aria-label=\"temp_max\">\r\n            ⛅\r\n          </span>{' '}\r\n          {temp_max}°C\r\n        </h3>\r\n        <h3>\r\n          현재 습도\r\n          <span role=\"img\" aria-label=\"humidity\">\r\n            💧\r\n          </span>{' '}\r\n          {humidity}°C\r\n        </h3>\r\n      </div>\r\n      <i className={`icon-right ${iconName} icon massive`}></i>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from 'react';\r\n\r\nconst Spinner = props => {\r\n  return (\r\n    <div className=\"ui segment\" style={{ width: '100%', height: '100vh' }}>\r\n      <div className=\"ui active dimmer\">\r\n        <div className=\"ui text loader\">{props.message}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultPorps = {\r\n  message: 'Loading...'\r\n};\r\n\r\nexport default Spinner;\r\n","import dotenv from 'dotenv';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\nimport './style.css';\r\n\r\ndotenv.config();\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    lat: null,\r\n    lon: null,\r\n    main: '',\r\n    name: '',\r\n    temp: '',\r\n    feels_like: '',\r\n    temp_min: '',\r\n    temp_max: '',\r\n    humidity: '',\r\n    errorNavMessage: '',\r\n    errorOpenWeatherMessage: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      position => {\r\n        this.setState({\r\n          lat: position.coords.latitude,\r\n          lon: position.coords.longitude\r\n        });\r\n        fetch(\r\n          `https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}&units=metric`\r\n        )\r\n          .then(res => {\r\n            return res.json();\r\n          })\r\n          .then(result => {\r\n            const {\r\n              main: { temp, feels_like, temp_min, temp_max, humidity },\r\n              weather: [{ main }]\r\n            } = result;\r\n            const { name } = result;\r\n            this.setState({\r\n              main: main,\r\n              name: name,\r\n              temp: temp,\r\n              feels_like: feels_like,\r\n              temp_min: temp_min,\r\n              temp_max: temp_max,\r\n              humidity: humidity\r\n            });\r\n          })\r\n          .then(err => this.setState({ errorOpenWeatherMessage: err }));\r\n      },\r\n      error => this.setState({ errorMessage: error.message })\r\n    );\r\n  }\r\n\r\n  getContent() {\r\n    if (!this.state.errorMessage && this.state.lat) {\r\n      return (\r\n        <SeasonDisplay\r\n          lat={this.state.lat}\r\n          lon={this.state.lon}\r\n          main={this.state.main}\r\n          name={this.state.name}\r\n          temp={this.state.temp}\r\n          feels_like={this.state.feels_like}\r\n          temp_min={this.state.temp_min}\r\n          temp_max={this.state.temp_max}\r\n          humidity={this.state.humidity}\r\n        ></SeasonDisplay>\r\n      );\r\n    }\r\n    if (this.state.errorMessage && !this.state.lat) {\r\n      return <div>{this.state.errorMessage}</div>;\r\n    }\r\n\r\n    return <Spinner message=\"Please accept location request!\"></Spinner>;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.getContent()}</div>;\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}